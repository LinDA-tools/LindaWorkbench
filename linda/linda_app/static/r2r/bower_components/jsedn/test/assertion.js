// Generated by CoffeeScript 1.8.0
(function() {
  var assert, assertEncode, assertNotParse, assertParse, edn, failed, isNotVal, isVal, passed, totalString, us;

  edn = require("../src/reader");

  us = require("underscore");

  passed = 0;

  failed = 0;

  isVal = function(val) {
    return function(comp) {
      return us.isEqual(comp, val);
    };
  };

  isNotVal = function(val) {
    return function(comp) {
      return !us.isEqual(comp, val);
    };
  };

  assert = function(desc, result, pred) {
    if (!us.isFunction(pred)) {
      pred = isVal(pred);
    }
    if (pred(result)) {
      passed++;
      return console.log("[OK]", desc);
    } else {
      failed++;
      console.log("[FAIL]", desc);
      return console.log("we got:", result.jsEncode != null ? result.jsEncode() : result);
    }
  };

  assertParse = function(desc, str, pred) {
    var e, result;
    try {
      result = edn.parse(str);
    } catch (_error) {
      e = _error;
      result = e;
    }
    return assert(desc, result, pred);
  };

  assertNotParse = function(desc, str) {
    var e, result;
    try {
      edn.parse(str);
      result = false;
    } catch (_error) {
      e = _error;
      result = true;
    }
    return assert(desc, str, function() {
      return result;
    });
  };

  assertEncode = function(desc, obj, pred) {
    return assert(desc, edn.encode(obj), pred);
  };

  totalString = function() {
    return "PASSED: " + passed + "/" + (passed + failed);
  };

  module.exports = {
    isVal: isVal,
    isNotVal: isNotVal,
    assert: assert,
    assertParse: assertParse,
    assertNotParse: assertNotParse,
    assertEncode: assertEncode,
    totalString: totalString
  };

}).call(this);
