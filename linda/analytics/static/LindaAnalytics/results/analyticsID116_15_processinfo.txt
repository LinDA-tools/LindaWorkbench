library(ape)
loaded_data <- na.omit(loaded_data);
myvars <- names(loaded_data) %in% c('rowID','basens','uri');
loaded_data <- loaded_data[!myvars];
column_number<-ncol(loaded_data);
rows_number<-nrow(loaded_data);
column_to_predict <-colnames(loaded_data[column_number]);
 trimmedValues<- data.frame();
 valuesToClean<-loaded_data[column_to_predict]; 
valuesToCleanNum<-rows_number; 
for(i in 1:valuesToCleanNum){ valueToTrim <- as.character(valuesToClean[i,1]);  if(grepl("#", valueToTrim)) {  position<-which(strsplit(valueToTrim, "")[[1]]=="^");  trimmedValues[i,1]<-substr(valueToTrim, 1, position[1]-1); }else{ trimmedValues[i,1]<-valueToTrim;}  }
result_column_number<-ncol(loaded_data); 
colnames(trimmedValues)[1]<- column_to_predict;
trimmedValues$value<-as.numeric(trimmedValues$value); 
loaded_data[[column_to_predict]] <- trimmedValues;
loaded_data.dists <- as.matrix(dist(cbind(loaded_data$x, loaded_data$y)));
loaded_data.dists.inv <- 1/loaded_data.dists; 
loaded_data.dists.inv[is.infinite(loaded_data.dists.inv)] <- 0 
diag(loaded_data.dists.inv) <- 0
morans_result<-Moran.I(loaded_data$value[1:rows_number,], loaded_data.dists.inv[1:rows_number, 1:rows_number]);
if (exists('morans_result'))   {  result <-  morans_result$p;   } else {  result <- 0.0;}
