// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  angular.module('app').factory('R2rs', function($http, Jsedn) {
    var dbAdapter, getSuggestedEntities, host, lovAdapter, recommenderAdapter, rowValuesToArray;
    //host = 'http://localhost:3000';
    host = R2R_PROXY;
    dbAdapter = host + '/api/v1/db';
    lovAdapter = host + '/api/v1/lov';
    recommenderAdapter = host + '/api/v1/recommender';
    rowValuesToArray = function(keys, row) {
      return function(i) {
        var key, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          key = keys[_i];
          _results.push(row[i](key));
        }
        return _results;
      };
    };
    getSuggestedEntities = function(url, params) {
      return $http.get(url, {
        params: params
      }).then(function(res) {
        var mydata, suggestions;
        suggestions = [];
        mydata = Jsedn.toJS(Jsedn.parse(res.data));
        (function(item) {
          return suggestions.push({
            uri: item.uri,
            prefixedName: item.uriPrefixed,
            localName: item.uriPrefixed.slice((item.vocabularyPrefix.length + 1)(item.uriPrefixed.length)),
            prefix: item.vocabularyPrefix + ':',
            score: item.score.toPrecision(3),
            group: 'suggested'
          });
        });
        mydata;
        return suggestions;
      });
    };
    return {
      getTables: function() {
        return $http.get(dbAdapter + '/tables').then(function(res) {
          return Jsedn.toJS(Jsedn.parse(res.data));
        });
      },
      getColumnsMap: function(table) {
        return $http.get(dbAdapter + '/columns', {
          params: {
            table: table
          }
        }).then(function(res) {
          return Jsedn.toJS(Jsedn.parse(res.data));
        });
      },
      getTableData: function(table, columnsMap) {
        return $http.get(dbAdapter + '/table', {
          params: {
            name: table
          }
        }).then(function(res) {
          var columnKeys, columnNames, mydata;
          columnKeys = function(i) {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = columnsMap.length; _i < _len; _i++) {
              i = columnsMap[_i];
              _results.push(i[0]);
            }
            return _results;
          };
          columnNames = function(i) {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = columnsMap.length; _i < _len; _i++) {
              i = columnsMap[_i];
              _results.push(i[1]);
            }
            return _results;
          };
          return mydata = Jsedn.toJS(Jsedn.parse(res.data({
            columns: columnNames,
            data: function(i) {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = mydata.length; _i < _len; _i++) {
                i = mydata[_i];
                _results.push(rowValuesToArray(columnKeys, i));
              }
              return _results;
            }
          })));
        });
      },
      getSubjectsForTemplate: function(table, baseUri, template) {
        var triples;
        triples = [];
        return $http.get(dbAdapter + '/subjects', {
          params: {
            table: table,
            template: encodeURI(baseUri + template)
          }
        }).then(function(res) {
          var mydata;
          mydata = Jsedn.toJS(Jsedn.parse(res.data));
          (function(i) {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = mydata.length; _i < _len; _i++) {
              i = mydata[_i];
              _results.push(triples.push([i, 'rdf:type', 'rdfs:resource']));
            }
            return _results;
          });
          return triples;
        });
      },
      getSuggestedLOVClasses: function(table, column) {
        return getSuggestedEntities(lovAdapter + '/classes', {
          table: table,
          column: column
        });
      },
      getSuggestedLOVProperties: function(table, column) {
        return getSuggestedEntities(lovAdapter + '/properties', {
          table: table,
          column: column
        });
      },
      getSuggestedDBPediaTypes: function(table, template) {
        return $http.get(recommenderAdapter + '/types', {
          params: {
            table: table,
            template: encodeURI(template)
          }
        }).then(function(res) {
          var mydata, suggestions;
          suggestions = [];
          mydata = Jsedn.toJS(Jsedn.parse(res.data));
          (function(i) {
            return suggestions.push({
              prefixedName: i.uri,
              group: 'suggested'
            });
          });
          mydata;
          return suggestions;
        });
      },
      registerDatabase: function(dbSpec) {
        return $http.get(dbAdapter + '/config/register', {
          params: {
            subname: dbSpec.subname,
            subprotocol: dbSpec.subprotocol,
            username: dbSpec.username,
            password: dbSpec.password
          }
        });
      }
    };
  });

}).call(this);
